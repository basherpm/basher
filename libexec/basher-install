#!/usr/bin/env bash
#
# Summary: Installs a package from github (or a custom site)
#
# Usage: basher install [--ssh] [site]/<package>[@ref]

set -e

use_ssh="false"

case $1 in
  --ssh)
    use_ssh="true"
    shift
  ;;
esac

if [ "$#" -ne 1 ]; then
  basher-help install
  exit 1
fi

if [[ "$1" = *://* ]]; then
  IFS=/ read -r -a parts <<< "$1"

  # If the protocol is ssh, set the use_ssh flag
  if [[ "${parts[0]}" == "ssh:" ]]; then
    use_ssh="true"
  fi

  # The second part is the site, $user@$site:$port. we don't need $user, as
  # it is git in 99% of the cases, but we must keep $port.
  site="${parts[2]##git@}"
  package="$(IFS=/ ; echo "${parts[*]:3}")"

  # Remove the '.git' if its at the end of the package name or if its right
  # before the branch/hash specifier.
  package="${package%%.git}"
  package="${package//.git@/@}"
elif [[ "$1" = */*/* ]]; then
  # Handle fully qualified urls which start with a protocol.
  IFS=/ read -r site user name <<< "$1"
  package="${user}/${name}"
else
  package="$1"
  site="github.com"
fi

if [ -z "$package" ]; then
  basher-help install
  exit 1
fi

IFS=/ read -r user name <<< "$package"

if [ -z "$user" ]; then
  basher-help install
  exit 1
fi

if [ -z "$name" ]; then
  basher-help install
  exit 1
fi

if [[ "$package" = */*@* ]]; then
  IFS=@ read -r package ref <<< "$package"
else
  ref=""
fi

if [ -z "$ref" ]; then
  basher-_clone "$use_ssh" "$site" "$package"
else
  basher-_clone "$use_ssh" "$site" "$package" "$ref"
fi
basher-_deps "$package"
basher-_link-bins "$package"
basher-_link-man "$package"
basher-_link-completions "$package"
